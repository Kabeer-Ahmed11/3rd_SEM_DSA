#include <stdlib.h>
#include <limits.h>     // For INT_MIN

#define MAX 2

// Create a stack with capacity of 100 elements
int stack[MAX];

// Initially stack is empty 
int top = -1;  //u can put top=-1


/* Function declaration to perform push and pop on stack */
void push(int element);
int  pop();


int main()
 {
    push(3);
    push(5);
    push(6);
    
    
   int z= pop();
   printf("\nremoved %d",z);
    z= pop();
    printf("\nremoved %d",z);
     z= pop();
    printf("\nremoved %d",z);

    return 0;
}



/**
 * Functiont to push a new element in stack.
 */
void push(int element)
{
    // Check stack overflow
    if (top == MAX-1) // if top=-1 then here max-1
    {
    printf("StackOverflow,cant add more elementto stack.\n ");
        return;
    }

    // Increase element count in stack
    top++;

    // Push element in stack
    stack[top] = element;

    printf("Data pushed to stack %d .\n ",element);
}


/**
 * Function to pop element from top of stack.
 */
int pop()
{
    // Check stack underflow
    if (top == -1) //if top=-1 here condition =-1
    {
        printf("\nStack is empty.\n");

        // Throw empty stack error/exception
        // Since C does not have concept of exception
        // Hence return minimum integer value as error value
        // Later in code check if return value is INT_MIN, then
        // stack is empty
        return INT_MIN;
    }
       int item=stack[top];
       top--;

    // Return stack top and decrease element count in stack
    return item;
}


   